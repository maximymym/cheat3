-- JJSploit-—Å–∫—Ä–∏–ø—Ç –¥–ª—è Blox Fruits —Å –¥–µ–±–∞–≥–æ–º:
-- —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å, —Å—Ç–∏–ª–∏, –º–µ—á–∏, –æ—Ä—É–∂–∏–µ, —Ñ—Ä—É–∫—Ç—ã, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
-- –∞–≥—Ä–µ–≥–∞—Ü–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –≤—ã–≤–æ–¥ –≤ TextBox (Ctrl+A ‚Üí Ctrl+C)
-- –î–ï–ë–ê–ì –í–ï–†–°–ò–Ø: –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –ª–µ–π–±–ª–∞—Ö + –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
-- –ù–û–í–û–ï: –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ HttpGet

local Players           = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService       = game:GetService("HttpService")
local player            = Players.LocalPlayer

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (IP —Å–µ—Ä–≤–µ—Ä–∞)
local SERVER_URL = "http://194.59.186.230:3000/api/data"

-- –°–æ–±—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
local toggleInv = ReplicatedStorage:WaitForChild("Events"):WaitForChild("ToggleInventoryWindow")

-- GUI –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
local invGui    = player:WaitForChild("PlayerGui"):WaitForChild("Main")
local scrolling = invGui.InventoryContainer.Right.Content.ScrollingFrame
local frame     = scrolling.Frame

-- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
local canvasStep   = 550
local totalPages   = 10
local slotsPerPage = 16

-- –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
local debugInfo = {
    foundFields = {},
    notFoundFields = {},
    itemsProcessed = 0,
    categoriesFound = 0,
    neighborsChecked = 0,
    lastSendResult = nil
}

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
local function urlEncode(str)
    if str then
        str = string.gsub(str, "\n", "\r\n")
        str = string.gsub(str, "([^%w ])", function(c) 
            return string.format("%%%02X", string.byte(c)) 
        end)
        str = string.gsub(str, " ", "+")
    end
    return str
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
local function sendDataToServer(data)
    local success, result = pcall(function()
        -- –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        local params = {
            "player=" .. urlEncode(player.Name),
            "level=" .. urlEncode(tostring(data.level)),
            "styles=" .. urlEncode(data.styles),
            "swords=" .. urlEncode(data.swords),
            "guns=" .. urlEncode(data.guns),
            "fruits=" .. urlEncode(data.fruits),
            "accessories=" .. urlEncode(data.accessories),
            "materials=" .. urlEncode(data.materials)
        }
        
        local url = SERVER_URL .. "?" .. table.concat(params, "&")
        
        -- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å
        local response = game:HttpGet(url, true)
        
        -- –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç
        local responseData = HttpService:JSONDecode(response)
        
        return {
            success = true,
            message = "–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!",
            serverResponse = responseData,
            url = url
        }
    end)
    
    if success then
        debugInfo.lastSendResult = result
        return result
    else
        local errorResult = {
            success = false,
            message = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: " .. tostring(result),
            error = result
        }
        debugInfo.lastSendResult = errorResult
        return errorResult
    end
end

-- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
local old = player.PlayerGui:FindFirstChild("StatsGui")
if old then old:Destroy() end

-- –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –æ—Ç—á—ë—Ç–∞
local statsGui = Instance.new("ScreenGui", player.PlayerGui)
statsGui.Name = "StatsGui"
statsGui.ResetOnSpawn = false

local bg = Instance.new("Frame", statsGui)
bg.Size               = UDim2.new(0, 650, 0, 570)
bg.Position           = UDim2.new(0, 10, 0, 10)
bg.BackgroundColor3   = Color3.new(0, 0, 0)
bg.BackgroundTransparency = 0.6
bg.BorderSizePixel    = 0

-- –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
local sendButton = Instance.new("TextButton", bg)
sendButton.Size = UDim2.new(0, 120, 0, 30)
sendButton.Position = UDim2.new(0, 10, 0, 10)
sendButton.BackgroundColor3 = Color3.new(0, 0.8, 0)
sendButton.TextColor3 = Color3.new(1, 1, 1)
sendButton.Text = "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"
sendButton.Font = Enum.Font.SourceSansBold
sendButton.TextSize = 14
sendButton.BorderSizePixel = 0

-- –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
local statusLabel = Instance.new("TextLabel", bg)
statusLabel.Size = UDim2.new(0, 500, 0, 30)
statusLabel.Position = UDim2.new(0, 140, 0, 10)
statusLabel.BackgroundTransparency = 1
statusLabel.TextColor3 = Color3.new(1, 1, 1)
statusLabel.Text = "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"
statusLabel.Font = Enum.Font.SourceSans
statusLabel.TextSize = 12
statusLabel.TextXAlignment = Enum.TextXAlignment.Left

local box = Instance.new("TextBox", bg)
box.Name             = "ReportBox"
box.Size             = UDim2.new(1, -20, 1, -60)
box.Position         = UDim2.new(0, 10, 0, 50)
box.BackgroundColor3 = Color3.new(1, 1, 1)
box.TextColor3       = Color3.new(0, 0, 0)
box.TextWrapped      = true
box.ClearTextOnFocus = false
box.TextEditable     = false
box.TextXAlignment   = Enum.TextXAlignment.Left
box.TextYAlignment   = Enum.TextYAlignment.Top
box.Text             = "–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."

-- –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
local function waitForChild(parent, name, timeout)
    timeout = timeout or 10
    local t = 0
    while t < timeout and not parent:FindFirstChild(name) do
        t = t + task.wait()
    end
    return parent:FindFirstChild(name)
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–±–∞–≥-–≤—ã–≤–æ–¥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞
local function debugObject(obj, name, depth)
    depth = depth or 0
    if depth > 3 then return end -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
    
    local indent = string.rep("  ", depth)
    local info = string.format("%s%s (%s)", indent, name, obj.ClassName)
    
    if obj:IsA("TextLabel") or obj:IsA("TextBox") then
        info = info .. string.format(" [Text: '%s']", obj.Text or "")
    end
    
    if obj:IsA("StringValue") or obj:IsA("IntValue") or obj:IsA("NumberValue") then
        info = info .. string.format(" [Value: '%s']", tostring(obj.Value))
    end
    
    return info
end

-- –£—Ä–æ–≤–µ–Ω—å
local function getLevel()
    local data = waitForChild(player, "Data", 15)
    local lvlO = data and data:FindFirstChild("Level")
    return lvlO and lvlO.Value or "?"
end

-- –°—Ç–∏–ª–∏ –±–æ—è
local function getFightingStyles()
    local out = {}
    local function scan(cont)
        for _, tool in ipairs(cont:GetChildren()) do
            if tool:IsA("Tool") then
                local n = tool.Name
                if n ~= "Blox Fruit" and not n:lower():find("sword") then
                    table.insert(out, n)
                end
            end
        end
    end
    scan(player.Backpack)
    if player.Character then scan(player.Character) end
    table.sort(out)
    return out
end

-- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
local function scanCategoryWithNeighbors(targetCategory)
    local found = {}
    local debugItems = {}
    local itemLocations = {} -- –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–¥–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã
    local uniqueItems = {} -- –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    local allFoundCategories = {} -- –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    
    -- –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    debugInfo.itemsProcessed = 0
    debugInfo.categoriesFound = 0
    debugInfo.neighborsChecked = 0
    
    -- –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    toggleInv:Fire()
    task.wait(0.5)
    -- —Å–±—Ä–æ—Å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    scrolling.CanvasPosition = Vector2.new(0, 0)
    task.wait(0.1)
    
    -- –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    for page = 0, totalPages - 1 do
        -- –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        scrolling.CanvasPosition = Vector2.new(0, canvasStep * page)
        task.wait(0.15)
        
        for i = 1, slotsPerPage do
            local slot = frame:FindFirstChild(tostring(i))
            if slot and slot:FindFirstChild("Filled") then
                local filled = slot.Filled
                debugInfo.itemsProcessed = debugInfo.itemsProcessed + 1
                
                local itemName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
                local itemCategory = ""
                local itemCount = 1 -- –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1
                local debugItem = {
                    slotNum = i,
                    page = page,
                    name = itemName,
                    category = itemCategory,
                    count = itemCount,
                    foundFields = {},
                    structure = {},
                    isDuplicate = false
                }
                
                -- –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞
                local info = filled:FindFirstChild("ItemInformation")
                if info then
                    local nmObj = info:FindFirstChild("ItemName")
                    if nmObj then
                        itemName = nmObj.Text
                        debugItem.name = itemName
                        table.insert(debugItem.foundFields, "ItemName: " .. itemName)
                    end
                    
                    -- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ ItemLine1
                    local line1Obj = info:FindFirstChild("ItemLine1")
                    if line1Obj then
                        local line1Text = line1Obj.Text or ""
                        if line1Text ~= "" then
                            itemCategory = line1Text
                            debugItem.category = itemCategory
                            table.insert(debugItem.foundFields, "Category in ItemLine1: " .. itemCategory)
                            
                            -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                            if not allFoundCategories[line1Text] then
                                allFoundCategories[line1Text] = {}
                            end
                            table.insert(allFoundCategories[line1Text], itemName)
                        end
                    end
                    
                    -- –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ Counter
                    local counterObj = info:FindFirstChild("Counter")
                    if counterObj then
                        table.insert(debugItem.foundFields, "Counter found: " .. counterObj.ClassName)
                        
                        -- –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ Counter
                        local foundCountInCounter = false
                        for _, counterChild in ipairs(counterObj:GetChildren()) do
                            if counterChild:IsA("TextLabel") then
                                local counterText = counterChild.Text or ""
                                if counterText ~= "" and counterText:match("%d+") then
                                    itemCount = tonumber(counterText:match("%d+")) or 1
                                    debugItem.count = itemCount
                                    table.insert(debugItem.foundFields, "Count in Counter TextLabel: " .. itemCount)
                                    foundCountInCounter = true
                                    break
                                end
                            end
                        end
                        
                        -- –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –¥–µ—Ç—è—Ö, –ø–æ–ø—Ä–æ–±—É–µ–º –≤ —Å–∞–º–æ–º Counter
                        if not foundCountInCounter and counterObj:IsA("TextLabel") then
                            local counterText = counterObj.Text or ""
                            if counterText ~= "" and counterText:match("%d+") then
                                itemCount = tonumber(counterText:match("%d+")) or 1
                                debugItem.count = itemCount
                                table.insert(debugItem.foundFields, "Count in Counter itself: " .. itemCount)
                                foundCountInCounter = true
                            end
                        end
                        
                        if not foundCountInCounter then
                            table.insert(debugItem.foundFields, "Counter found but no count extracted, using default: 1")
                        end
                    else
                        table.insert(debugItem.foundFields, "No Counter found, using default count: 1")
                    end
                    
                    -- –ù–û–í–û–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = 1 –¥–ª—è –º–µ—á–µ–π –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
                    if itemCategory ~= "" then
                        local lowerCategory = itemCategory:lower()
                        if lowerCategory:find("sword") or lowerCategory:find("accessory") or 
                           lowerCategory:find("weapon") or lowerCategory:find("melee") or lowerCategory:find("gun") then
                            local originalCount = itemCount
                            itemCount = 1
                            debugItem.count = 1
                            table.insert(debugItem.foundFields, string.format("–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: %s –≤—Å–µ–≥–¥–∞ 1 —à—Ç. (–±—ã–ª–æ: %d)", 
                                itemCategory, originalCount))
                        end
                    end
                    
                    -- –î–µ–±–∞–≥: –≤—ã–≤–æ–¥–∏–º –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É ItemInformation
                    for _, child in ipairs(info:GetChildren()) do
                        local childInfo = debugObject(child, child.Name, 0)
                        table.insert(debugItem.structure, childInfo)
                        
                        -- –î–ª—è Counter –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–∫–∂–µ –µ–≥–æ –¥–µ—Ç–µ–π
                        if child.Name == "Counter" then
                            for _, grandChild in ipairs(child:GetChildren()) do
                                local grandChildInfo = debugObject(grandChild, grandChild.Name, 1)
                                table.insert(debugItem.structure, "  " .. grandChildInfo)
                            end
                        end
                        
                        -- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö (—Ñ–æ–ª–ª–±—ç–∫)
                        if itemCategory == "" and (child.Name:lower():find("category") or child.Name:lower():find("type")) then
                            local catValue = child.Text or child.Value or ""
                            if catValue ~= "" then
                                itemCategory = catValue
                                debugItem.category = itemCategory
                                table.insert(debugItem.foundFields, "Category in " .. child.Name .. ": " .. itemCategory)
                            end
                        end
                    end
                end
                
                -- –ù–û–í–û–ï: –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö (siblings) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ItemLine1
                if itemCategory == "" then
                    debugInfo.neighborsChecked = debugInfo.neighborsChecked + 1
                    
                    for _, sibling in ipairs(filled:GetChildren()) do
                        if sibling ~= info then -- –ù–µ —Å–∞–º ItemInformation
                            local siblingInfo = debugObject(sibling, sibling.Name, 0)
                            table.insert(debugItem.structure, "SIBLING: " .. siblingInfo)
                            
                            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ—Ç sibling –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
                            if sibling:IsA("TextLabel") then
                                local text = sibling.Text or ""
                                if text ~= "" and text ~= itemName then
                                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —ç—Ç–æ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                                    local lowerText = text:lower()
                                    if lowerText:find("sword") or lowerText:find("gun") or lowerText:find("fruit") or 
                                       lowerText:find("accessory") or lowerText:find("material") or lowerText:find("weapon") then
                                        itemCategory = text
                                        debugItem.category = itemCategory
                                        table.insert(debugItem.foundFields, "Category in sibling TextLabel: " .. itemCategory)
                                    end
                                end
                            end
                            
                            -- –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ–π sibling'–∞
                            for _, grandchild in ipairs(sibling:GetChildren()) do
                                if grandchild:IsA("TextLabel") then
                                    local gcText = grandchild.Text or ""
                                    if gcText ~= "" and gcText ~= itemName then
                                        local lowerGcText = gcText:lower()
                                        if lowerGcText:find("sword") or lowerGcText:find("gun") or lowerGcText:find("fruit") or 
                                           lowerGcText:find("accessory") or lowerGcText:find("material") or lowerGcText:find("weapon") then
                                            itemCategory = gcText
                                            debugItem.category = itemCategory
                                            table.insert(debugItem.foundFields, "Category in sibling child: " .. itemCategory)
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                
                -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                local isMatch = false
                if itemCategory ~= "" then
                    debugInfo.categoriesFound = debugInfo.categoriesFound + 1
                    isMatch = itemCategory:lower():find(targetCategory:lower())
                    table.insert(debugItem.foundFields, string.format("Category match check: '%s' contains '%s'? %s", 
                        itemCategory:lower(), targetCategory:lower(), isMatch and "YES" or "NO"))
                else
                    -- –§–æ–ª–ª–±—ç–∫: –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
                    isMatch = itemName:lower():find(targetCategory:lower())
                    if isMatch then
                        table.insert(debugItem.foundFields, "Matched by name fallback")
                    else
                        table.insert(debugItem.foundFields, "No match by name fallback")
                    end
                end
                
                if isMatch and itemName ~= "" then
                    -- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
                    local uniqueKey = itemName -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á: —Ç–æ–ª—å–∫–æ –∏–º—è
                    
                    if uniqueItems[uniqueKey] then
                        -- –≠—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç!
                        debugItem.isDuplicate = true
                        table.insert(debugItem.foundFields, "–î–£–ë–õ–ò–ö–ê–¢: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                    else
                        -- –≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
                        uniqueItems[uniqueKey] = true
                        
                        -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≥–¥–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –¥–µ–±–∞–≥–∞
                        if not itemLocations[itemName] then
                            itemLocations[itemName] = {}
                        end
                        table.insert(itemLocations[itemName], {
                            page = page,
                            slot = i,
                            count = itemCount,
                            isUnique = true
                        })
                        
                        -- –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                        local itemWithCount = {name = itemName, count = itemCount}
                        table.insert(found, itemWithCount)
                        debugItem.matched = true
                        table.insert(debugItem.foundFields, "–£–ù–ò–ö–ê–õ–¨–ù–´–ô: –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    end
                    
                    -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–µ–±–∞–≥–∞ (–≤–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã)
                    if not itemLocations[itemName] then
                        itemLocations[itemName] = {}
                    end
                    if debugItem.isDuplicate then
                        table.insert(itemLocations[itemName], {
                            page = page,
                            slot = i,
                            count = itemCount,
                            isUnique = false
                        })
                    end
                else
                    debugItem.matched = false
                end
                
                -- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–µ–±–∞–≥ –í–°–ï –ø—Ä–µ–¥–º–µ—Ç—ã, –Ω–µ —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ
                table.insert(debugItems, debugItem)
            end
        end
    end
    
    -- –∑–∞–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    toggleInv:Fire()
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    debugInfo.lastScanCategory = targetCategory
    debugInfo.lastScanItems = debugItems
    debugInfo.itemLocations = itemLocations
    debugInfo.allFoundCategories = allFoundCategories
    
    return found
end

-- –ê–≥–≥—Ä–µ–≥–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ (–ò–º—è √ó –ö–æ–ª-–≤–æ) - –û–ë–ù–û–í–õ–ï–ù–û –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
local function aggregate(list)
    local counts = {}
    local aggregationDebug = {} -- –î–ª—è –¥–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    
    for _, item in ipairs(list) do
        local name = ""
        local count = 1
        
        if type(item) == "table" then
            name = item.name
            count = item.count
        else
            name = item
            count = 1
        end
        
        if counts[name] then
            counts[name] = counts[name] + count
            table.insert(aggregationDebug, string.format("–î–æ–±–∞–≤–∏–ª–∏ –∫ %s: +%d = %d", name, count, counts[name]))
        else
            counts[name] = count
            table.insert(aggregationDebug, string.format("–ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç %s: %d", name, count))
        end
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    debugInfo.lastAggregation = {
        inputCount = #list,
        debug = aggregationDebug,
        finalCounts = counts
    }
    
    local out = {}
    for name, cnt in pairs(counts) do
        if cnt > 1 then
            table.insert(out, ("%s √ó%d"):format(name, cnt))
        else
            table.insert(out, name)
        end
    end
    table.sort(out)
    return out
end

-- –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
local function getGuiSwords()      return aggregate(scanCategoryWithNeighbors("sword"))      end
local function getGuiGuns()        return aggregate(scanCategoryWithNeighbors("gun"))        end
local function getGuiFruits()      return aggregate(scanCategoryWithNeighbors("fruit"))      end
local function getGuiAccessories() return aggregate(scanCategoryWithNeighbors("accessory")) end
local function getGuiMaterials()   return aggregate(scanCategoryWithNeighbors("material"))   end

-- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–±–∞–≥ –æ—Ç—á—ë—Ç–∞
local function generateDebugReport()
    local debugLines = {
        "=== –î–ï–ë–ê–ì –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===",
        string.format("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: %d", debugInfo.itemsProcessed),
        string.format("–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: %d", debugInfo.categoriesFound),
        string.format("–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: %d", debugInfo.neighborsChecked),
        "",
        "=== –î–ï–¢–ê–õ–ò –ü–û–°–õ–ï–î–ù–ï–ì–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø ===",
        string.format("–ò—Å–∫–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: %s", debugInfo.lastScanCategory or "–Ω–µ—Ç"),
        ""
    }
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    if debugInfo.lastSendResult then
        table.insert(debugLines, "=== –ü–û–°–õ–ï–î–ù–Ø–Ø –û–¢–ü–†–ê–í–ö–ê ===")
        table.insert(debugLines, string.format("–°—Ç–∞—Ç—É—Å: %s", debugInfo.lastSendResult.success and "‚úÖ –£–°–ü–ï–®–ù–û" or "‚ùå –û–®–ò–ë–ö–ê"))
        table.insert(debugLines, string.format("–°–æ–æ–±—â–µ–Ω–∏–µ: %s", debugInfo.lastSendResult.message))
        if debugInfo.lastSendResult.url then
            table.insert(debugLines, string.format("URL: %s", debugInfo.lastSendResult.url))
        end
        if debugInfo.lastSendResult.serverResponse then
            table.insert(debugLines, string.format("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: %s", HttpService:JSONEncode(debugInfo.lastSendResult.serverResponse)))
        end
        if debugInfo.lastSendResult.error then
            table.insert(debugLines, string.format("–û—à–∏–±–∫–∞: %s", tostring(debugInfo.lastSendResult.error)))
        end
        table.insert(debugLines, "")
    end
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    if debugInfo.allFoundCategories then
        table.insert(debugLines, "=== –í–°–ï –ù–ê–ô–î–ï–ù–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò ===")
        for category, items in pairs(debugInfo.allFoundCategories) do
            table.insert(debugLines, string.format("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '%s':", category))
            for _, itemName in ipairs(items) do
                table.insert(debugLines, string.format("   ‚Ä¢ %s", itemName))
            end
            table.insert(debugLines, "")
        end
    end
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if debugInfo.itemLocations then
        table.insert(debugLines, "=== –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï –ü–†–ï–î–ú–ï–¢–û–í ===")
        for itemName, locations in pairs(debugInfo.itemLocations) do
            table.insert(debugLines, string.format("üìã %s:", itemName))
            local totalCount = 0
            local uniqueCount = 0
            local duplicateCount = 0
            
            for _, location in ipairs(locations) do
                local status = ""
                if location.isUnique == true then
                    status = "‚úÖ –£–ù–ò–ö–ê–õ–¨–ù–´–ô"
                    uniqueCount = uniqueCount + 1
                    totalCount = totalCount + location.count
                elseif location.isUnique == false then
                    status = "‚ùå –î–£–ë–õ–ò–ö–ê–¢"
                    duplicateCount = duplicateCount + 1
                else
                    status = "‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–û"
                end
                
                table.insert(debugLines, string.format("   ‚Ä¢ –°—Ç—Ä.%d –°–ª–æ—Ç %d: %d —à—Ç. %s", 
                    location.page, location.slot, location.count, status))
            end
            
            table.insert(debugLines, string.format("   –ò–¢–û–ì–û: %d —à—Ç. (—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: %d, –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: %d)", 
                totalCount, uniqueCount, duplicateCount))
            table.insert(debugLines, "")
        end
    end
    
    if debugInfo.lastScanItems then
        table.insert(debugLines, "=== –î–ï–¢–ê–õ–ò –°–õ–û–¢–û–í ===")
        for _, item in ipairs(debugInfo.lastScanItems) do
            local slotStatus = ""
            if item.isDuplicate then
                slotStatus = " ‚ùå –î–£–ë–õ–ò–ö–ê–¢"
            elseif item.matched then
                slotStatus = " ‚úÖ –£–ù–ò–ö–ê–õ–¨–ù–´–ô"
            end
            
            table.insert(debugLines, string.format("üì¶ –°–ª–æ—Ç %d (—Å—Ç—Ä.%d): %s%s", 
                item.slotNum, item.page, item.name, slotStatus))
            table.insert(debugLines, string.format("   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s", item.category ~= "" and item.category or "–ù–ï –ù–ê–ô–î–ï–ù–ê"))
            table.insert(debugLines, string.format("   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d", item.count or 1))
            table.insert(debugLines, string.format("   –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: %s", item.matched and "–î–ê" or "–ù–ï–¢"))
            
            if #item.foundFields > 0 then
                table.insert(debugLines, "   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è:")
                for _, field in ipairs(item.foundFields) do
                    table.insert(debugLines, "     ‚Ä¢ " .. field)
                end
            end
            
            if #item.structure > 0 then
                table.insert(debugLines, "   –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
                for _, struct in ipairs(item.structure) do
                    table.insert(debugLines, "     " .. struct)
                end
            end
            
            table.insert(debugLines, "")
        end
    end
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    if debugInfo.lastAggregation then
        table.insert(debugLines, "=== –î–ï–ë–ê–ì –ê–ì–†–ï–ì–ê–¶–ò–ò ===")
        table.insert(debugLines, string.format("–í—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: %d", debugInfo.lastAggregation.inputCount))
        table.insert(debugLines, "")
        
        if debugInfo.lastAggregation.debug then
            table.insert(debugLines, "–ü—Ä–æ—Ü–µ—Å—Å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:")
            for _, debugMsg in ipairs(debugInfo.lastAggregation.debug) do
                table.insert(debugLines, "  ‚Ä¢ " .. debugMsg)
            end
            table.insert(debugLines, "")
        end
        
        if debugInfo.lastAggregation.finalCounts then
            table.insert(debugLines, "–ò—Ç–æ–≥–æ–≤—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:")
            for name, count in pairs(debugInfo.lastAggregation.finalCounts) do
                table.insert(debugLines, string.format("  ‚Ä¢ %s: %d", name, count))
            end
            table.insert(debugLines, "")
        end
    end
    
    return table.concat(debugLines, "\n")
end

-- –°–æ–±–∏—Ä–∞–µ–º –æ—Ç—á—ë—Ç
local function buildReport()
    local lvl    = getLevel()
    local styles = getFightingStyles()
    local swords = getGuiSwords()
    local guns   = getGuiGuns()
    local fruits = getGuiFruits()
    local accs   = getGuiAccessories()
    local mats   = getGuiMaterials()

    local lines = {
        "=== –ò–ù–í–ï–ù–¢–ê–†–¨ ===",
        ("üÜô –£—Ä–æ–≤–µ–Ω—å: %s"):format(lvl),
        ("ü§ú –°—Ç–∏–ª–∏ –±–æ—è: %s"):format(#styles>0 and table.concat(styles, ", ") or "–Ω–µ—Ç"),
        ("üó° –ú–µ—á–∏: %s"):format(#swords>0 and table.concat(swords, ", ") or "–Ω–µ—Ç"),
        ("üî´ –û—Ä—É–∂–∏–µ: %s"):format(#guns>0 and table.concat(guns, ", ") or "–Ω–µ—Ç"),
        ("üçâ –§—Ä—É–∫—Ç—ã: %s"):format(#fruits>0 and table.concat(fruits, ", ") or "–Ω–µ—Ç"),
        ("üëë –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã: %s"):format(#accs>0 and table.concat(accs, ", ") or "–Ω–µ—Ç"),
        ("üõ† –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: %s"):format(#mats>0 and table.concat(mats, ", ") or "–Ω–µ—Ç")
    }
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    debugInfo.lastInventoryData = {
        level = lvl,
        styles = #styles>0 and table.concat(styles, ", ") or "–Ω–µ—Ç",
        swords = #swords>0 and table.concat(swords, ", ") or "–Ω–µ—Ç",
        guns = #guns>0 and table.concat(guns, ", ") or "–Ω–µ—Ç",
        fruits = #fruits>0 and table.concat(fruits, ", ") or "–Ω–µ—Ç",
        accessories = #accs>0 and table.concat(accs, ", ") or "–Ω–µ—Ç",
        materials = #mats>0 and table.concat(mats, ", ") or "–Ω–µ—Ç"
    }
    
    return table.concat(lines, "\n")
end

-- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
sendButton.MouseButton1Click:Connect(function()
    statusLabel.Text = "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
    statusLabel.TextColor3 = Color3.new(1, 1, 0) -- –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
    sendButton.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5) -- –°–µ—Ä—ã–π —Ü–≤–µ—Ç
    sendButton.Text = "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞..."
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if not debugInfo.lastInventoryData then
        statusLabel.Text = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏! –û–±–Ω–æ–≤–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å."
        statusLabel.TextColor3 = Color3.new(1, 0, 0)
        sendButton.BackgroundColor3 = Color3.new(0, 0.8, 0)
        sendButton.Text = "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"
        return
    end
    
    -- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    local result = sendDataToServer(debugInfo.lastInventoryData)
    
    if result.success then
        statusLabel.Text = "‚úÖ " .. result.message
        statusLabel.TextColor3 = Color3.new(0, 1, 0) -- –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
        sendButton.BackgroundColor3 = Color3.new(0, 1, 0) -- –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
        sendButton.Text = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        
        -- –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –≤–∏–¥
        task.wait(3)
        sendButton.BackgroundColor3 = Color3.new(0, 0.8, 0)
        sendButton.Text = "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"
        statusLabel.Text = "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"
        statusLabel.TextColor3 = Color3.new(1, 1, 1)
    else
        statusLabel.Text = "‚ùå " .. result.message
        statusLabel.TextColor3 = Color3.new(1, 0, 0) -- –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
        sendButton.BackgroundColor3 = Color3.new(1, 0, 0) -- –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
        sendButton.Text = "‚ùå –û—à–∏–±–∫–∞"
        
        -- –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –≤–∏–¥
        task.wait(5)
        sendButton.BackgroundColor3 = Color3.new(0, 0.8, 0)
        sendButton.Text = "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"
        statusLabel.Text = "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"
        statusLabel.TextColor3 = Color3.new(1, 1, 1)
    end
end)

-- –í—ã–≤–æ–¥ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ GUI
box.Text = buildReport() 
